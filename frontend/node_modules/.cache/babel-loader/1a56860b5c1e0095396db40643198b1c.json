{"ast":null,"code":"import _objectSpread from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/src/components/scraperForm.jsx\";\nimport React, { Component } from \"react\";\nimport http from \"../services/httpService\";\nimport config from \"../config.json\";\nimport { toast } from \"react-toastify\";\nimport AliasedInput from \"./aliasedInput.jsx\";\nimport SkillsGrid from \"./skillsGrid\";\nimport Input from \"./input.jsx\";\n\nvar shortid = require(\"shortid\");\n\nvar ScraperForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScraperForm, _Component);\n\n  function ScraperForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScraperForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScraperForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      jobName: \"\",\n      jobAliases: [],\n      // skills: {},\n      // errors: {}\n      skill: {\n        \"1key\": \"ayup\"\n      }\n    };\n\n    _this.onChangeTest = function (id, e) {\n      console.log(id, e); // let oldState = {...this.state}\n      // let name = e.currentTarget.name;\n      // let value = e.currentTarget.value;\n      // console.log(name, value);\n      // if (id==null) {\n      //   this.setState( {[name]: value})\n      // } else {\n      //   console.log(\"here\");\n      //   oldState[name][id] = value\n      //   this.setState( {[name]: oldState[name]})\n      // }\n    };\n\n    _this.handleDelete = function (id) {\n      var skills = _objectSpread({}, _this.state.skills);\n\n      delete skills[id];\n\n      _this.setState({\n        skills: skills\n      });\n    };\n\n    _this.handleClear = function (id) {\n      var skills = _objectSpread({}, _this.state.skills);\n\n      skills[id].title = \"\";\n      skills[id].aliases = [];\n\n      _this.setState({\n        skills: skills\n      });\n    };\n\n    _this.handleCreate = function () {\n      var id = shortid.generate();\n\n      var skills = _objectSpread({}, _this.state.skills);\n\n      skills[id] = {\n        title: \"\",\n        aliases: []\n      };\n\n      _this.setState({\n        skills: skills\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ScraperForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {} // handlePost = async e => {\n    //   console.log(\"handle post triggered\");\n    //   e.preventDefault();\n    //   const originalJob = this.state.job;\n    //   try {\n    //     await http.post(\n    //       config.scraperServerAPIEndpoint + \"/api/scraper\",\n    //       this.state.job\n    //     );\n    //   } catch (ex) {\n    //     toast.error(\"conection error TODO: fix this message\");\n    //     this.setState({ job: originalJob });\n    //   }\n    // };\n    // handleTitleChange = (id, e) => {\n    //   console.log(id, e.currentTarget);\n    //   // this.setState({ jobName: input.value });\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const { jobName, jobAliases } = this.state;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Job title\"), React.createElement(AliasedInput, {\n        id: \"hmmm\",\n        titleLabel: \"Job title\",\n        name: \"jobName\",\n        title: this.state.jobName,\n        aliases: this.state.skill[\"1key\"],\n        handleChange: this.onChangeTest // handleTitleChange={this.handleTitleChange}\n        // handleAliasChange={this.handleJobAliasChange}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ScraperForm;\n}(Component);\n\nexport default ScraperForm;","map":{"version":3,"sources":["/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/src/components/scraperForm.jsx"],"names":["React","Component","http","config","toast","AliasedInput","SkillsGrid","Input","shortid","require","ScraperForm","state","jobName","jobAliases","skill","onChangeTest","id","e","console","log","handleDelete","skills","setState","handleClear","title","aliases","handleCreate","generate"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;IAEMC,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGN;AACA;AACAC,MAAAA,KAAK,EAAE;AAAC,gBAAQ;AAAT;AALD,K;;UAiCRC,Y,GAAe,UAACC,EAAD,EAAKC,CAAL,EAAW;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAAgBC,CAAhB,EADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAwBDG,Y,GAAe,UAACJ,EAAD,EAAQ;AACrB,UAAMK,MAAM,qBAAQ,MAAKV,KAAL,CAAWU,MAAnB,CAAZ;;AACA,aAAOA,MAAM,CAACL,EAAD,CAAb;;AACA,YAAKM,QAAL,CAAc;AAAED,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;UAEDE,W,GAAc,UAAAP,EAAE,EAAI;AAClB,UAAMK,MAAM,qBAAQ,MAAKV,KAAL,CAAWU,MAAnB,CAAZ;;AACAA,MAAAA,MAAM,CAACL,EAAD,CAAN,CAAWQ,KAAX,GAAmB,EAAnB;AACAH,MAAAA,MAAM,CAACL,EAAD,CAAN,CAAWS,OAAX,GAAqB,EAArB;;AACA,YAAKH,QAAL,CAAc;AAAED,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;UAEDK,Y,GAAe,YAAM;AACnB,UAAMV,EAAE,GAAGR,OAAO,CAACmB,QAAR,EAAX;;AACA,UAAIN,MAAM,qBAAQ,MAAKV,KAAL,CAAWU,MAAnB,CAAV;;AACAA,MAAAA,MAAM,CAACL,EAAD,CAAN,GAAa;AAAEQ,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,OAAO,EAAE;AAAtB,OAAb;;AACA,YAAKH,QAAL,CAAc;AAAED,QAAAA,MAAM,EAANA;AAAF,OAAd;AACD,K;;;;;;;wCAhFmB,CAAE,C,CAEtB;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;6BA2DS;AACP;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,YAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,UAAU,EAAC,WAFb;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,OAJpB;AAKE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,KAAX,CAAiB,MAAjB,CALX;AAME,QAAA,YAAY,EAAE,KAAKC,YANrB,CAOE;AACA;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZF,CADF;AAgCD;;;;EA9HuBd,S;;AAiI1B,eAAeS,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport http from \"../services/httpService\";\nimport config from \"../config.json\";\nimport { toast } from \"react-toastify\";\nimport AliasedInput from \"./aliasedInput.jsx\";\nimport SkillsGrid from \"./skillsGrid\";\nimport Input from \"./input.jsx\";\nconst shortid = require(\"shortid\");\n\nclass ScraperForm extends Component {\n  state = {\n    jobName: \"\",\n    jobAliases: [],\n    // skills: {},\n    // errors: {}\n    skill: {\"1key\": \"ayup\"}\n  };\n\n  componentDidMount() {}\n\n  // handlePost = async e => {\n  //   console.log(\"handle post triggered\");\n  //   e.preventDefault();\n\n  //   const originalJob = this.state.job;\n\n  //   try {\n  //     await http.post(\n  //       config.scraperServerAPIEndpoint + \"/api/scraper\",\n  //       this.state.job\n  //     );\n  //   } catch (ex) {\n  //     toast.error(\"conection error TODO: fix this message\");\n  //     this.setState({ job: originalJob });\n  //   }\n  // };\n\n\n  // handleTitleChange = (id, e) => {\n  //   console.log(id, e.currentTarget);\n  //   // this.setState({ jobName: input.value });\n  // };\n\n  onChangeTest = (id, e) => {\n    console.log(id, e);\n    // let oldState = {...this.state}\n    // let name = e.currentTarget.name;\n    // let value = e.currentTarget.value;\n    // console.log(name, value);\n    // if (id==null) {\n    //   this.setState( {[name]: value})\n    // } else {\n    //   console.log(\"here\");\n    //   oldState[name][id] = value\n    //   this.setState( {[name]: oldState[name]})\n    // }\n  }\n\n\n  // handleJobAliasChange = ({ currentTarget: input }) => {\n  //   this.setState({ jobAliases: input.value.split(\",\") });\n  // };\n\n  // handleTitleChange = ({ currentTarget: input }) => {\n  //   this.setState({ jobName: input.value });\n  // };\n\n  // handleSkillTitleChange = ({ currentTarget: input }) => {\n  //   let skills = { ...this.state.skills };\n  //   skills[input.name].title = input.value;\n  //   this.setState({ skills });\n  // };\n\n  // handleSkillAliasChange = ({ currentTarget: input }) => {\n  //   let skills = { ...this.state.skills };\n  //   let aliases = input.value.split(\",\");\n  //   skills[input.name].aliases = aliases;\n  //   this.setState({ skills });\n  // };\n\n  handleDelete = (id) => {\n    const skills = { ...this.state.skills };\n    delete skills[id];\n    this.setState({ skills });\n  };\n\n  handleClear = id => {\n    const skills = { ...this.state.skills };\n    skills[id].title = \"\";\n    skills[id].aliases = [];\n    this.setState({ skills });\n  };\n\n  handleCreate = () => {\n    const id = shortid.generate();\n    let skills = { ...this.state.skills };\n    skills[id] = { title: \"\", aliases: [] };\n    this.setState({ skills });\n  };\n\n  render() {\n    // const { jobName, jobAliases } = this.state;\n\n    return (\n      <div>\n        <h3 className=\"mt-5\">Job title</h3>\n        <AliasedInput\n          id=\"hmmm\"\n          titleLabel=\"Job title\"\n          name=\"jobName\"\n          title={this.state.jobName}\n          aliases={this.state.skill[\"1key\"]}\n          handleChange={this.onChangeTest}\n          // handleTitleChange={this.handleTitleChange}\n          // handleAliasChange={this.handleJobAliasChange}\n        />\n        <div>\n          {/* <h3 className=\"mt-5\">Skills</h3>\n          <SkillsGrid\n            skills={skills}\n            handleSkillTitleChange={this.handleSkillTitleChange}\n            handleSkillAliasChange={this.handleSkillAliasChange}\n            handleDelete={this.handleDelete}\n            handleClear={this.handleClear}\n            numCols={3}\n          />\n          <button\n            onClick={this.handleCreate}\n            className=\"btn-lg btn-success mt-3\"\n          >\n            +\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScraperForm;\n"]},"metadata":{},"sourceType":"module"}