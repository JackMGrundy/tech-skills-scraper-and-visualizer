{"ast":null,"code":"import _regeneratorRuntime from \"/Users/JGrundy/Documents/code/data-science-job-search/app/frontend/react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(flatten);\n\nfunction flatten(arrays) {\n  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, array;\n\n  return _regeneratorRuntime.wrap(function flatten$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context.prev = 3;\n          _iterator = arrays[Symbol.iterator]();\n\n        case 5:\n          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n            _context.next = 11;\n            break;\n          }\n\n          array = _step.value;\n          return _context.delegateYield(array, \"t0\", 8);\n\n        case 8:\n          _iteratorNormalCompletion = true;\n          _context.next = 5;\n          break;\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t1 = _context[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n\n        case 17:\n          _context.prev = 17;\n          _context.prev = 18;\n\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n\n        case 20:\n          _context.prev = 20;\n\n          if (!_didIteratorError) {\n            _context.next = 23;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 23:\n          return _context.finish(20);\n\n        case 24:\n          return _context.finish(17);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[3, 13, 17, 25], [18,, 20, 24]]);\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}","map":null,"metadata":{},"sourceType":"module"}