{"ast":null,"code":"import _objectSpread from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/src/components/scraperForm.jsx\";\nimport React, { Component } from \"react\";\nimport http from \"../services/httpService\";\nimport config from \"../config.json\";\nimport { toast } from \"react-toastify\";\nimport AliasedInput from \"./aliasedInput.jsx\";\nimport SkillsGrid from \"./skillsGrid\";\nimport InputList from \"./inputList.jsx\";\nimport Input from \"./input.jsx\";\n\nvar shortid = require(\"shortid\");\n\nvar ScraperForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScraperForm, _Component);\n\n  function ScraperForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScraperForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScraperForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      jobName: \"\",\n      jobAliases: \"\",\n      skills: {},\n      aliases: {}\n    };\n\n    _this.handleDelete = function (val) {\n      console.log(\"hmm\"); // let values = this.state.values.split(\",\");\n      // values = values.map(Function.prototype.call, String.prototype.trim);\n      // let index = values.indexOf(val.trim());\n      // if (index > -1) {\n      //   values.splice(index, 1);\n      // }\n      // this.setState({ values: values.join(\",\") });\n      // console.log(values);\n    };\n\n    _this.handleCreate = function () {// let values =\n      //   this.state.values == \"\"\n      //     ? this.state.newValue.trim()\n      //     : this.state.values + \",\" + this.state.newValue.trim();\n      // this.setState({ values: values, newValue: \"\" });\n      // console.log(values);\n    };\n\n    _this.handleCreateSkill = function () {\n      console.log(_this.state);\n      var id = shortid.generate();\n\n      var skills = _objectSpread({}, _this.state.skills);\n\n      var aliases = _objectSpread({}, _this.state.aliases);\n\n      skills[id] = \"\";\n      aliases[id] = \"\";\n\n      _this.setState({\n        skills: skills,\n        aliases: aliases\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ScraperForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          jobName = _this$state.jobName,\n          jobAliases = _this$state.jobAliases,\n          skills = _this$state.skills,\n          aliases = _this$state.aliases;\n      var helperFunctions = {\n        delete: this.handleDelete\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Job title\"), React.createElement(Input, {\n        label: \"Job title\",\n        id: \"hmmm\",\n        name: \"jobname\" // value={title}\n        // onChange={(e) => handleTitleChange(e)}\n        ,\n        margin: \"\",\n        size: \"form-control-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Job title\"), Object.keys(this.state.skills).map(function (key) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, key);\n      }), React.createElement(\"button\", {\n        onClick: this.handleCreateSkill,\n        className: \"btn-lg btn-success mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"+\"), \" \"));\n    }\n  }]);\n\n  return ScraperForm;\n}(Component);\n\nexport default ScraperForm;","map":{"version":3,"sources":["/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/src/components/scraperForm.jsx"],"names":["React","Component","http","config","toast","AliasedInput","SkillsGrid","InputList","Input","shortid","require","ScraperForm","state","jobName","jobAliases","skills","aliases","handleDelete","val","console","log","handleCreate","handleCreateSkill","id","generate","setState","helperFunctions","delete","Object","keys","map","key"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;IAEMC,W;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,MAAM,EAAE,EAHF;AAINC,MAAAA,OAAO,EAAE;AAJH,K;;UA2FRC,Y,GAAe,UAAAC,GAAG,EAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADoB,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAEDC,Y,GAAe,YAAM,CACnB;AACA;AACA;AACA;AACA;AACA;AACD,K;;UAEDC,iB,GAAoB,YAAM;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKR,KAAjB;AACA,UAAMW,EAAE,GAAGd,OAAO,CAACe,QAAR,EAAX;;AACA,UAAIT,MAAM,qBAAQ,MAAKH,KAAL,CAAWG,MAAnB,CAAV;;AACA,UAAIC,OAAO,qBAAQ,MAAKJ,KAAL,CAAWI,OAAnB,CAAX;;AACAD,MAAAA,MAAM,CAACQ,EAAD,CAAN,GAAa,EAAb;AACAP,MAAAA,OAAO,CAACO,EAAD,CAAP,GAAc,EAAd;;AACA,YAAKE,QAAL,CAAc;AAAEV,QAAAA,MAAM,EAAEA,MAAV;AAAkBC,QAAAA,OAAO,EAAEA;AAA3B,OAAd;AACD,K;;;;;;;6BAEQ;AAAA,wBAC0C,KAAKJ,KAD/C;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,UADV,eACUA,UADV;AAAA,UACsBC,MADtB,eACsBA,MADtB;AAAA,UAC8BC,OAD9B,eAC8BA,OAD9B;AAEP,UAAMU,eAAe,GAAG;AAAEC,QAAAA,MAAM,EAAE,KAAKV;AAAf,OAAxB;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,IAAI,EAAC,SAHP,CAIE;AACA;AALF;AAME,QAAA,MAAM,EAAC,EANT;AAOE,QAAA,IAAI,EAAE,iBAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGW,MAAM,CAACC,IAAP,CAAY,KAAKjB,KAAL,CAAWG,MAAvB,EAA+Be,GAA/B,CAAmC,UAAAC,GAAG,EAAI;AACzC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,GAAL,CAAP;AACD,OAFA,CAFH,EAcE;AACE,QAAA,OAAO,EAAE,KAAKT,iBADhB;AAEE,QAAA,SAAS,EAAC,yBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAdF,EAmBY,GAnBZ,CAbF,CADF;AAqCD;;;;EApKuBrB,S;;AAuK1B,eAAeU,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport http from \"../services/httpService\";\nimport config from \"../config.json\";\nimport { toast } from \"react-toastify\";\nimport AliasedInput from \"./aliasedInput.jsx\";\nimport SkillsGrid from \"./skillsGrid\";\nimport InputList from \"./inputList.jsx\";\nimport Input from \"./input.jsx\";\nconst shortid = require(\"shortid\");\n\nclass ScraperForm extends Component {\n  state = {\n    jobName: \"\",\n    jobAliases: \"\",\n    skills: {},\n    aliases: {}\n  };\n  // state = {\n  // jobName: \"\",\n  // jobAliases: [],\n  // skills: {},\n  // errors: {}\n  // };\n\n  // componentDidMount() {\n  //   // const id = shortid.generate();\n  //   this.setState({\n  //     jobName: \"\",\n  //     skills: {\n  //       \"testid\": \"Baking\"\n  //     }\n  //   });\n  // }\n\n  // handlePost = async e => {\n  //   console.log(\"handle post triggered\");\n  //   e.preventDefault();\n\n  //   const originalJob = this.state.job;\n\n  //   try {\n  //     await http.post(\n  //       config.scraperServerAPIEndpoint + \"/api/scraper\",\n  //       this.state.job\n  //     );\n  //   } catch (ex) {\n  //     toast.error(\"conection error TODO: fix this message\");\n  //     this.setState({ job: originalJob });\n  //   }\n  // };\n\n  // handleJobAliasChange = ({ currentTarget: input }) => {\n  //   this.setState({ jobAliases: input.value.split(\",\") });\n  // };\n\n  // handleTitleChange = (e, id = null) => {\n  //   console.log(id, e.currentTarget);\n  //   console.log(e.currentTarget.name, e.currentTarget.value);\n  //   if (id == null) {\n  //     this.setState({ [e.currentTarget.name]: [e.currentTarget.value] });\n  //   }\n  //   // this.setState({ jobName: input.value });\n  // };\n\n  // handleSkillTitleChange = ({ currentTarget: input }) => {\n  //   let skills = { ...this.state.skills };\n  //   skills[input.name].title = input.value;\n  //   this.setState({ skills });\n  // };\n\n  // handleSkillAliasChange = ({ currentTarget: input }) => {\n  //   let skills = { ...this.state.skills };\n  //   let aliases = input.value.split(\",\");\n  //   skills[input.name].aliases = aliases;\n  //   this.setState({ skills });\n  // };\n\n  // handleDelete = id => {\n  //   const skills = { ...this.state.skills };\n  //   delete skills[id];\n  //   this.setState({ skills });\n  // };\n\n  // handleClear = id => {\n  //   const skills = { ...this.state.skills };\n  //   skills[id].title = \"\";\n  //   skills[id].aliases = [];\n  //   this.setState({ skills });\n  // };\n\n  // handleCreate = () => {\n  // const id = shortid.generate();\n  // let skills = { ...this.state.skills };\n  // skills[id] = { title: \"\", aliases: [] };\n  // this.setState({ skills });\n  // };\n\n  // inType can be \"text\", \"list\", \"object\"\n  // onchange = ({currentTarget: input}, inType=\"text\", id=null) => {\n\n  // };\n\n  handleDelete = val => {\n    console.log(\"hmm\");\n    // let values = this.state.values.split(\",\");\n    // values = values.map(Function.prototype.call, String.prototype.trim);\n    // let index = values.indexOf(val.trim());\n    // if (index > -1) {\n    //   values.splice(index, 1);\n    // }\n    // this.setState({ values: values.join(\",\") });\n    // console.log(values);\n  };\n\n  handleCreate = () => {\n    // let values =\n    //   this.state.values == \"\"\n    //     ? this.state.newValue.trim()\n    //     : this.state.values + \",\" + this.state.newValue.trim();\n    // this.setState({ values: values, newValue: \"\" });\n    // console.log(values);\n  };\n\n  handleCreateSkill = () => {\n    console.log(this.state);\n    const id = shortid.generate();\n    let skills = { ...this.state.skills };\n    let aliases = { ...this.state.aliases };\n    skills[id] = \"\";\n    aliases[id] = \"\";\n    this.setState({ skills: skills, aliases: aliases });\n  };\n\n  render() {\n    const { jobName, jobAliases, skills, aliases } = this.state;\n    const helperFunctions = { delete: this.handleDelete };\n\n    return (\n      <div>\n        <h3 className=\"mt-5\">Job title</h3>\n        <Input\n          label=\"Job title\"\n          id=\"hmmm\"\n          name=\"jobname\"\n          // value={title}\n          // onChange={(e) => handleTitleChange(e)}\n          margin=\"\"\n          size={\"form-control-lg\"}\n        />\n        {/* <InputList values={aliases[\"k1\"]} helperFunctions={helperFunctions} /> */}\n\n        <div>\n          <h3 className=\"mt-5\">Job title</h3>\n          {Object.keys(this.state.skills).map(key => {\n            return <h1>{key}</h1>;\n          })}\n          {/* \n          <SkillsGrid\n            // skills={skills}\n            // handleSkillTitleChange={this.handleSkillTitleChange}\n            // handleSkillAliasChange={this.handleSkillAliasChange}\n            // handleDelete={this.handleDelete}\n            // handleClear={this.handleClear}\n            numCols={3}\n          /> */}\n          <button\n            onClick={this.handleCreateSkill}\n            className=\"btn-lg btn-success mt-3\"\n          >\n            +\n          </button>{\" \"}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScraperForm;\n"]},"metadata":{},"sourceType":"module"}