{"ast":null,"code":"import _slicedToArray from \"/Users/JGrundy/Documents/code/data-science-job-search/app/frontend/react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction dogroup(values, keyof) {\n  var map = new Map();\n  var index = -1;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n      var key = keyof(value, ++index, values);\n      var group = map.get(key);\n      if (group) group.push(value);else map.set(key, [value]);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return map;\n}\n\nexport default function rollup(values, reduce) {\n  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    keys[_key - 2] = arguments[_key];\n  }\n\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    var map = dogroup(values, keys[i]);\n    return new Map(Array.from(map, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          k = _ref2[0],\n          v = _ref2[1];\n\n      return [k, regroup(v, i + 1)];\n    }));\n  }(values, 0);\n}","map":null,"metadata":{},"sourceType":"module"}