{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/JGrundy/Documents/code/tech-skills-scraper-and-visualizer/frontend/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Ref = require('./ref');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function Set() {\n    _classCallCheck(this, Set);\n\n    this._set = [];\n  }\n\n  _createClass(Set, [{\n    key: \"add\",\n    value: function add(value, refs) {\n      if (!Ref.isRef(value) && this.has(value, null, null, false)) {\n        return;\n      }\n\n      if (refs !== undefined) {\n        // If it's a merge, we don't have any refs\n        Ref.push(refs, value);\n      }\n\n      this._set.push(value);\n\n      return this;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(add, remove) {\n      for (var i = 0; i < add._set.length; ++i) {\n        this.add(add._set[i]);\n      }\n\n      for (var _i = 0; _i < remove._set.length; ++_i) {\n        this.remove(remove._set[_i]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(value) {\n      this._set = this._set.filter(function (item) {\n        return value !== item;\n      });\n      return this;\n    }\n  }, {\n    key: \"has\",\n    value: function has(value, state, options, insensitive) {\n      for (var i = 0; i < this._set.length; ++i) {\n        var items = this._set[i];\n\n        if (state && Ref.isRef(items)) {\n          // Only resolve references if there is a state, otherwise it's a merge\n          items = items(state.reference || state.parent, options);\n        }\n\n        if (!Array.isArray(items)) {\n          items = [items];\n        }\n\n        for (var j = 0; j < items.length; ++j) {\n          var item = items[j];\n\n          if (typeof value !== typeof item) {\n            continue;\n          }\n\n          if (value === item || value instanceof Date && item instanceof Date && value.getTime() === item.getTime() || insensitive && typeof value === 'string' && value.toLowerCase() === item.toLowerCase() || Buffer.isBuffer(value) && Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary')) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"values\",\n    value: function values(options) {\n      if (options && options.stripUndefined) {\n        var values = [];\n\n        for (var i = 0; i < this._set.length; ++i) {\n          var item = this._set[i];\n\n          if (item !== undefined) {\n            values.push(item);\n          }\n        }\n\n        return values;\n      }\n\n      return this._set.slice();\n    }\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var newSet = new Set();\n      newSet._set = this._set.slice();\n      return newSet;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(source) {\n      var newSet = new Set();\n      newSet._set = this._set.concat(source._set);\n      return newSet;\n    }\n  }]);\n\n  return Set;\n}();","map":null,"metadata":{},"sourceType":"script"}