{"ast":null,"code":"/*!\n * reactjs-popup v1.3.2\n * (c) 2018-present Youssouf EL AZIZI <youssoufelazizi@gmail.com>\n * Released under the MIT License.\n */\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n/* Algo to calculate position\n  1. center position for popup content : the center of the trigger will be the center of the content content\n      so the popup content position will be like this :\n      top => the y of the center for the trigger element : trigger.top + trigger.height/2\n      left => the x of the center for the trigger element : trigger.left + trigger.width/2\n\n  2. translate position according to the first  position attribute  passed  in the function argument\n      for example :\n        position = 'left top'\n        we need to handle the first argument in the position: 'left' => that's mean we need to translate the popup content according to the X axis by - content.width/2\n\n  3.translate position according to the first  position attribute  passed  in the function argument\n    for example :\n      position = 'left top'\n      the second argument 'top' => translate popup content by + content.height*4/5\n\n  4. check if calculated position is going out of bounds of wrapper box or not. If yes repeat 1-3 for next position enum. By default wrapper box is window element\n*/\n\n\nfunction getCoordinatesForPosition(triggerBounding, ContentBounding, position, arrow, _ref) {\n  var offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY;\n  var margin = arrow ? 8 : 0;\n  var args = position.split(\" \"); // the step N 1 : center the popup content => ok\n\n  var CenterTop = triggerBounding.top + triggerBounding.height / 2;\n  var CenterLeft = triggerBounding.left + triggerBounding.width / 2;\n  var height = ContentBounding.height,\n      width = ContentBounding.width;\n  var top = CenterTop - height / 2;\n  var left = CenterLeft - width / 2;\n  var transform = \"\";\n  var arrowTop = \"0%\";\n  var arrowLeft = \"0%\"; // the  step N 2 : => ok\n\n  switch (args[0]) {\n    case \"top\":\n      top -= height / 2 + triggerBounding.height / 2 + margin;\n      transform = \"rotate(45deg)\";\n      arrowTop = \"100%\";\n      arrowLeft = \"50%\";\n      break;\n\n    case \"bottom\":\n      top += height / 2 + triggerBounding.height / 2 + margin;\n      transform = \"rotate(225deg)\";\n      arrowLeft = \"50%\";\n      break;\n\n    case \"left\":\n      left -= width / 2 + triggerBounding.width / 2 + margin;\n      transform = \" rotate(-45deg)\";\n      arrowLeft = \"100%\";\n      arrowTop = \"50%\";\n      break;\n\n    case \"right\":\n      left += width / 2 + triggerBounding.width / 2 + margin;\n      transform = \"rotate(135deg)\";\n      arrowTop = \"50%\";\n      break;\n  }\n\n  switch (args[1]) {\n    case \"top\":\n      top = triggerBounding.top;\n      arrowTop = triggerBounding.height / 2 + \"px\";\n      break;\n\n    case \"bottom\":\n      top = triggerBounding.top - height + triggerBounding.height;\n      arrowTop = height - triggerBounding.height / 2 + \"px\";\n      break;\n\n    case \"left\":\n      left = triggerBounding.left;\n      arrowLeft = triggerBounding.width / 2 + \"px\";\n      break;\n\n    case \"right\":\n      left = triggerBounding.left - width + triggerBounding.width;\n      arrowLeft = width - triggerBounding.width / 2 + \"px\";\n      break;\n  }\n\n  top = args[0] === \"top\" ? top - offsetY : top + offsetY;\n  left = args[0] === \"left\" ? left - offsetX : left + offsetX;\n  return {\n    top: top,\n    left: left,\n    transform: transform,\n    arrowLeft: arrowLeft,\n    arrowTop: arrowTop\n  };\n}\n\nfunction calculatePosition(triggerBounding, ContentBounding, positions, arrow, _ref2, wrapperBox) {\n  var offsetX = _ref2.offsetX,\n      offsetY = _ref2.offsetY;\n  var bestCoords;\n  var i = 0;\n\n  while (i < positions.length) {\n    bestCoords = getCoordinatesForPosition(triggerBounding, ContentBounding, positions[i], arrow, {\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n    var contentBox = {\n      top: bestCoords.top,\n      left: bestCoords.left,\n      width: ContentBounding.width,\n      height: ContentBounding.height\n    };\n\n    if (contentBox.top <= wrapperBox.top || contentBox.left <= wrapperBox.left || contentBox.top + contentBox.height >= wrapperBox.top + wrapperBox.height || contentBox.left + contentBox.width >= wrapperBox.left + wrapperBox.width) {\n      i++;\n    } else {\n      break;\n    }\n  }\n\n  return bestCoords;\n}\n\nvar styles = {\n  popupContent: {\n    tooltip: {\n      position: \"absolute\",\n      zIndex: \"2\",\n      width: \"200px\",\n      background: \"rgb(255, 255, 255)\",\n      border: \"1px solid rgb(187, 187, 187)\",\n      boxShadow: \"rgba(0, 0, 0, 0.2) 0px 1px 3px\",\n      padding: \"5px\"\n    },\n    modal: {\n      position: \"relative\",\n      background: \"rgb(255, 255, 255)\",\n      width: \"50%\",\n      margin: \"auto\",\n      border: \"1px solid rgb(187, 187, 187)\",\n      padding: \"5px\"\n    }\n  },\n  popupArrow: {\n    height: \"10px\",\n    width: \"10px\",\n    position: \"absolute\",\n    background: \"rgb(255, 255, 255)\",\n    transform: \"rotate(45deg)\",\n    margin: \"-5px\",\n    zIndex: \"-1\",\n    boxShadow: \"rgba(0, 0, 0, 0.2) 1px 1px 1px\"\n  },\n  overlay: {\n    tooltip: {\n      position: \"fixed\",\n      top: \"0\",\n      bottom: \"0\",\n      left: \"0\",\n      right: \"0\"\n    },\n    modal: {\n      position: \"fixed\",\n      top: \"0\",\n      bottom: \"0\",\n      left: \"0\",\n      right: \"0\",\n      background: \"rgba(0, 0, 0,0.5)\",\n      display: \"flex\",\n      zIndex: \"999\"\n    }\n  }\n};\nvar POSITION_TYPES = [\"top left\", \"top center\", \"top right\", \"right top\", \"right center\", \"right bottom\", \"bottom left\", \"bottom center\", \"bottom right\", \"left top\", \"left center\", \"left bottom\"];\n\nvar Popup =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Popup, _React$PureComponent);\n\n  function Popup(props) {\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popup).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isOpen: _this.props.open || _this.props.defaultOpen,\n      modal: _this.props.modal ? true : !_this.props.trigger // we create this modal state because the popup can't be a tooltip if the trigger prop doesn't exist\n\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"repositionOnResize\", function () {\n      _this.setPosition();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEscape\", function (e) {\n      if (e.key === \"Escape\") _this.closePopup();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"lockScroll\", function () {\n      if (_this.state.modal && _this.props.lockScroll) document.getElementsByTagName(\"body\")[0].style.overflow = \"hidden\";\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetScroll\", function () {\n      if (_this.state.modal && _this.props.lockScroll) document.getElementsByTagName(\"body\")[0].style.overflow = \"auto\";\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"togglePopup\", function () {\n      if (_this.state.isOpen) _this.closePopup();else _this.openPopup();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"openPopup\", function () {\n      if (_this.state.isOpen || _this.props.disabled) return;\n\n      _this.setState({\n        isOpen: true\n      }, function () {\n        _this.setPosition();\n\n        _this.props.onOpen();\n\n        _this.lockScroll();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"closePopup\", function () {\n      if (!_this.state.isOpen) return;\n\n      _this.props.onClose();\n\n      _this.setState({\n        isOpen: false\n      }, function () {\n        _this.resetScroll();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseEnter\", function () {\n      clearTimeout(_this.timeOut);\n      var mouseEnterDelay = _this.props.mouseEnterDelay;\n      _this.timeOut = setTimeout(function () {\n        return _this.openPopup();\n      }, mouseEnterDelay);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMouseLeave\", function () {\n      clearTimeout(_this.timeOut);\n      var mouseLeaveDelay = _this.props.mouseLeaveDelay;\n      _this.timeOut = setTimeout(function () {\n        return _this.closePopup();\n      }, mouseLeaveDelay);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getTooltipBoundary\", function () {\n      var keepTooltipInside = _this.props.keepTooltipInside;\n      var boundingBox = {\n        top: 0,\n        left: 0,\n        width: window.innerWidth,\n        height: window.innerHeight\n      };\n\n      if (typeof keepTooltipInside === \"string\") {\n        var selector = document.querySelector(keepTooltipInside);\n\n        if (process.env.NODE_ENV !== \"production\") {\n          if (selector === null) throw new Error(\"\".concat(keepTooltipInside, \" selector is not exist : keepTooltipInside must be a valid html selector 'class' or 'Id'  or a boolean value\"));\n        }\n\n        boundingBox = selector.getBoundingClientRect();\n      }\n\n      return boundingBox;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setPosition\", function () {\n      var _this$state = _this.state,\n          modal = _this$state.modal,\n          isOpen = _this$state.isOpen;\n      if (modal || !isOpen) return;\n      var _this$props = _this.props,\n          arrow = _this$props.arrow,\n          position = _this$props.position,\n          offsetX = _this$props.offsetX,\n          offsetY = _this$props.offsetY,\n          keepTooltipInside = _this$props.keepTooltipInside,\n          arrowStyle = _this$props.arrowStyle;\n\n      var helper = _this.HelperEl.getBoundingClientRect();\n\n      var trigger = _this.TriggerEl.getBoundingClientRect();\n\n      var content = _this.ContentEl.getBoundingClientRect();\n\n      var boundingBox = _this.getTooltipBoundary();\n\n      var positions = Array.isArray(position) ? position : [position]; // keepTooltipInside would be activated if the  keepTooltipInside exist or the position is Array\n\n      if (keepTooltipInside || Array.isArray(position)) positions = _toConsumableArray(positions).concat(POSITION_TYPES);\n      var cords = calculatePosition(trigger, content, positions, arrow, {\n        offsetX: offsetX,\n        offsetY: offsetY\n      }, boundingBox);\n      _this.ContentEl.style.top = cords.top - helper.top + \"px\";\n      _this.ContentEl.style.left = cords.left - helper.left + \"px\";\n\n      if (arrow) {\n        _this.ArrowEl.style[\"transform\"] = cords.transform;\n        _this.ArrowEl.style[\"-ms-transform\"] = cords.transform;\n        _this.ArrowEl.style[\"-webkit-transform\"] = cords.transform;\n        _this.ArrowEl.style.top = arrowStyle.top || cords.arrowTop;\n        _this.ArrowEl.style.left = arrowStyle.left || cords.arrowLeft;\n      }\n\n      if (window.getComputedStyle(_this.TriggerEl, null).getPropertyValue(\"position\") == \"static\" || window.getComputedStyle(_this.TriggerEl, null).getPropertyValue(\"position\") == \"\") _this.TriggerEl.style.position = \"relative\";\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addWarperAction\", function () {\n      var _this$props2 = _this.props,\n          contentStyle = _this$props2.contentStyle,\n          className = _this$props2.className,\n          on = _this$props2.on;\n      var modal = _this.state.modal;\n      var popupContentStyle = modal ? styles.popupContent.modal : styles.popupContent.tooltip;\n      var childrenElementProps = {\n        className: \"popup-content \".concat(className),\n        style: Object.assign({}, popupContentStyle, contentStyle),\n        ref: _this.setContentRef,\n        onClick: function onClick(e) {\n          e.stopPropagation();\n        }\n      };\n\n      if (!modal && on.indexOf(\"hover\") >= 0) {\n        childrenElementProps.onMouseEnter = _this.onMouseEnter;\n        childrenElementProps.onMouseLeave = _this.onMouseLeave;\n      }\n\n      return childrenElementProps;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderTrigger\", function () {\n      var triggerProps = {\n        key: \"T\"\n      };\n      var _this$props3 = _this.props,\n          on = _this$props3.on,\n          trigger = _this$props3.trigger;\n      var onAsArray = Array.isArray(on) ? on : [on];\n\n      for (var i = 0, len = onAsArray.length; i < len; i++) {\n        switch (onAsArray[i]) {\n          case \"click\":\n            triggerProps.onClick = _this.togglePopup;\n            break;\n\n          case \"hover\":\n            triggerProps.onMouseEnter = _this.onMouseEnter;\n            triggerProps.onMouseLeave = _this.onMouseLeave;\n            break;\n\n          case \"focus\":\n            triggerProps.onFocus = _this.onMouseEnter;\n            break;\n        }\n      }\n\n      if (typeof trigger === \"function\") return React.cloneElement(trigger(_this.state.isOpen), triggerProps);\n      return React.cloneElement(trigger, triggerProps);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderContent\", function () {\n      var _this$props4 = _this.props,\n          arrow = _this$props4.arrow,\n          arrowStyle = _this$props4.arrowStyle;\n      var modal = _this.state.modal;\n      return React.createElement(\"div\", _extends({}, _this.addWarperAction(), {\n        key: \"C\"\n      }), arrow && !modal && React.createElement(\"div\", {\n        ref: _this.setArrowRef,\n        style: Object.assign({}, styles.popupArrow, arrowStyle)\n      }), typeof _this.props.children === \"function\" ? _this.props.children(_this.closePopup, _this.state.isOpen) : _this.props.children);\n    });\n\n    _this.setTriggerRef = function (r) {\n      return _this.TriggerEl = r;\n    };\n\n    _this.setContentRef = function (r) {\n      return _this.ContentEl = r;\n    };\n\n    _this.setArrowRef = function (r) {\n      return _this.ArrowEl = r;\n    };\n\n    _this.setHelperRef = function (r) {\n      return _this.HelperEl = r;\n    };\n\n    _this.timeOut = 0;\n    return _this;\n  }\n\n  _createClass(Popup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props5 = this.props,\n          closeOnEscape = _this$props5.closeOnEscape,\n          defaultOpen = _this$props5.defaultOpen,\n          repositionOnResize = _this$props5.repositionOnResize;\n      if (defaultOpen) this.setPosition();\n\n      if (closeOnEscape) {\n        window.addEventListener(\"keyup\", this.onEscape);\n      }\n\n      if (repositionOnResize) {\n        window.addEventListener('resize', this.repositionOnResize);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.open === nextProps.open) return;\n      if (nextProps.open) this.openPopup();else this.closePopup();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.disabled !== this.props.disabled && this.props.disabled && this.state.isOpen) {\n        this.closePopup();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // kill any function to execute if the component is unmounted\n      clearTimeout(this.timeOut);\n      var _this$props6 = this.props,\n          closeOnEscape = _this$props6.closeOnEscape,\n          repositionOnResize = _this$props6.repositionOnResize; // remove events listeners\n\n      if (closeOnEscape) {\n        window.removeEventListener(\"keyup\", this.onEscape);\n      }\n\n      if (repositionOnResize) {\n        window.removeEventListener('resize', this.repositionOnResize);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          overlayStyle = _this$props7.overlayStyle,\n          closeOnDocumentClick = _this$props7.closeOnDocumentClick,\n          on = _this$props7.on;\n      var modal = this.state.modal;\n      var overlay = this.state.isOpen && !(on.indexOf(\"hover\") >= 0);\n      var ovStyle = modal ? styles.overlay.modal : styles.overlay.tooltip;\n      return [!!this.props.trigger && React.createElement(Ref, {\n        innerRef: this.setTriggerRef,\n        key: \"R\"\n      }, this.renderTrigger()), this.state.isOpen && React.createElement(\"div\", {\n        key: \"H\",\n        style: {\n          position: \"absolute\",\n          top: \"0px\",\n          left: \"0px\"\n        },\n        ref: this.setHelperRef\n      }), overlay && React.createElement(\"div\", {\n        key: \"O\",\n        className: \"popup-overlay\",\n        style: Object.assign({}, ovStyle, overlayStyle),\n        onClick: closeOnDocumentClick ? this.closePopup : undefined\n      }, modal && this.renderContent()), this.state.isOpen && !modal && this.renderContent()];\n    }\n  }]);\n\n  return Popup;\n}(React.PureComponent);\n\n_defineProperty(Popup, \"defaultProps\", {\n  children: function children() {\n    return React.createElement(\"span\", null, \" Your Content Here !!\");\n  },\n  trigger: null,\n  onOpen: function onOpen() {},\n  onClose: function onClose() {},\n  defaultOpen: false,\n  open: false,\n  disabled: false,\n  closeOnDocumentClick: true,\n  repositionOnResize: true,\n  closeOnEscape: true,\n  on: [\"click\"],\n  contentStyle: {},\n  arrowStyle: {},\n  overlayStyle: {},\n  className: \"\",\n  position: \"bottom center\",\n  modal: false,\n  lockScroll: false,\n  arrow: true,\n  offsetX: 0,\n  offsetY: 0,\n  mouseEnterDelay: 100,\n  mouseLeaveDelay: 100,\n  keepTooltipInside: false\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  var PropTypes = require(\"prop-types\");\n\n  var TRIGGER_TYPES = [\"hover\", \"click\", \"focus\"];\n  Popup.propTypes = {\n    arrowStyle: PropTypes.object,\n    contentStyle: PropTypes.object,\n    overlayStyle: PropTypes.object,\n    className: PropTypes.string,\n    modal: PropTypes.bool,\n    closeOnDocumentClick: PropTypes.bool,\n    repositionOnResize: PropTypes.bool,\n    disabled: PropTypes.bool,\n    lockScroll: PropTypes.bool,\n    offsetX: PropTypes.number,\n    offsetY: PropTypes.number,\n    mouseEnterDelay: PropTypes.number,\n    mouseLeaveDelay: PropTypes.number,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    open: PropTypes.bool,\n    defaultOpen: PropTypes.bool,\n    trigger: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n    // for uncontrolled component we don't need the trigger Element\n    on: PropTypes.oneOfType([PropTypes.oneOf(TRIGGER_TYPES), PropTypes.arrayOf(PropTypes.oneOf(TRIGGER_TYPES))]),\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.element, PropTypes.string]).isRequired,\n    position: PropTypes.oneOfType([PropTypes.oneOf(POSITION_TYPES), PropTypes.arrayOf(PropTypes.oneOf(POSITION_TYPES))]),\n    keepTooltipInside: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n  };\n}\n\nvar Ref =\n/*#__PURE__*/\nfunction (_React$PureComponent2) {\n  _inherits(Ref, _React$PureComponent2);\n\n  function Ref() {\n    _classCallCheck(this, Ref);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ref).apply(this, arguments));\n  }\n\n  _createClass(Ref, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var innerRef = this.props.innerRef;\n      if (innerRef) innerRef(findDOMNode(this));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.Children.only(children);\n    }\n  }]);\n\n  return Ref;\n}(React.PureComponent);\n\nexport default Popup;","map":null,"metadata":{},"sourceType":"module"}